/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$unsplash-11: (400px, 700px, -400px, -700px, 400px, 266px, 1600px, 967px, '../img/sprite/unsplash.jpg', 'unsplash-11', );
$unsplash-12: (800px, 0px, -800px, 0px, 400px, 267px, 1600px, 967px, '../img/sprite/unsplash.jpg', 'unsplash-12', );
$unsplash-13: (400px, 0px, -400px, 0px, 400px, 360px, 1600px, 967px, '../img/sprite/unsplash.jpg', 'unsplash-13', );
$unsplash-14: (800px, 700px, -800px, -700px, 400px, 266px, 1600px, 967px, '../img/sprite/unsplash.jpg', 'unsplash-14', );
$unsplash-15: (800px, 267px, -800px, -267px, 400px, 267px, 1600px, 967px, '../img/sprite/unsplash.jpg', 'unsplash-15', );
$unsplash-16: (0px, 400px, 0px, -400px, 400px, 300px, 1600px, 967px, '../img/sprite/unsplash.jpg', 'unsplash-16', );
$unsplash-17: (0px, 0px, 0px, 0px, 400px, 400px, 1600px, 967px, '../img/sprite/unsplash.jpg', 'unsplash-17', );
$unsplash-18: (1200px, 0px, -1200px, 0px, 400px, 241px, 1600px, 967px, '../img/sprite/unsplash.jpg', 'unsplash-18', );
$unsplash-19: (0px, 700px, 0px, -700px, 400px, 267px, 1600px, 967px, '../img/sprite/unsplash.jpg', 'unsplash-19', );
$unsplash-20: (400px, 400px, -400px, -400px, 400px, 300px, 1600px, 967px, '../img/sprite/unsplash.jpg', 'unsplash-20', );
$unsplash-width: 1600px;
$unsplash-height: 967px;
$unsplash-image: '../img/sprite/unsplash.jpg';
$unsplash-sprites: ($unsplash-11, $unsplash-12, $unsplash-13, $unsplash-14, $unsplash-15, $unsplash-16, $unsplash-17, $unsplash-18, $unsplash-19, $unsplash-20, );
$unsplash: (1600px, 967px, '../img/sprite/unsplash.jpg', $unsplash-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
@mixin sprite-resize($sprite, $scale) {
	$sprite-width: nth($sprite, 5);
	$sprite-height: nth($sprite, 6);
	width: $sprite-width * $scale;
	height: $sprite-height * $scale;
	$sprite-offset-x: nth($sprite, 3) * $scale;
	$sprite-offset-y: nth($sprite, 4) * $scale;
	background-position: $sprite-offset-x  $sprite-offset-y;
	
	$sprite-full-width: nth($sprite, 7) * $scale;
	$sprite-full-height: nth($sprite, 8) * $scale;
	background-size: $sprite-full-width $sprite-full-height;
	
	$sprite-image: nth($sprite, 9);
	background-image: url(#{$sprite-image});
}


@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generatessssss identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}

@mixin sprites-id($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    ##{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
